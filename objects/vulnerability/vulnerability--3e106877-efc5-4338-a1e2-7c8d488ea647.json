{
    "type": "bundle",
    "id": "bundle--78d077c9-914c-466a-b811-0be3c1a8c38f",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--3e106877-efc5-4338-a1e2-7c8d488ea647",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-05-18T00:29:12.16092Z",
            "modified": "2024-05-18T00:29:12.16092Z",
            "name": "CVE-2024-35793",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndebugfs: fix wait/cancellation handling during remove\n\nBen Greear further reports deadlocks during concurrent debugfs\nremove while files are being accessed, even though the code in\nquestion now uses debugfs cancellations. Turns out that despite\nall the review on the locking, we missed completely that the\nlogic is wrong: if the refcount hits zero we can finish (and\nneed not wait for the completion), but if it doesn't we have\nto trigger all the cancellations. As written, we can _never_\nget into the loop triggering the cancellations. Fix this, and\nexplain it better while at it.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-35793"
                }
            ]
        }
    ]
}