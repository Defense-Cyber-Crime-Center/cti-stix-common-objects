{
    "type": "bundle",
    "id": "bundle--31c9cc4b-bab6-4f0c-92a9-9b99980df401",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--74c7e657-e63d-4ab5-9501-0c93c1ac86b8",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-02-29T00:27:08.646502Z",
            "modified": "2024-02-29T00:27:08.646502Z",
            "name": "CVE-2021-47012",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nRDMA/siw: Fix a use after free in siw_alloc_mr\n\nOur code analyzer reported a UAF.\n\nIn siw_alloc_mr(), it calls siw_mr_add_mem(mr,..). In the implementation of\nsiw_mr_add_mem(), mem is assigned to mr->mem and then mem is freed via\nkfree(mem) if xa_alloc_cyclic() failed. Here, mr->mem still point to a\nfreed object. After, the execution continue up to the err_out branch of\nsiw_alloc_mr, and the freed mr->mem is used in siw_mr_drop_mem(mr).\n\nMy patch moves \"mr->mem = mem\" behind the if (xa_alloc_cyclic(..)<0) {}\nsection, to avoid the uaf.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2021-47012"
                }
            ]
        }
    ]
}