{
    "type": "bundle",
    "id": "bundle--75a45e16-0a99-4821-a885-a4f96a61ea08",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--8077069c-80a0-4a48-bb4e-37e5343a350d",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-02-25T00:38:21.684156Z",
            "modified": "2025-02-25T00:38:21.684156Z",
            "name": "CVE-2025-27144",
            "description": "Go JOSE provides an implementation of the Javascript Object Signing and Encryption set of standards in Go, including support for JSON Web Encryption (JWE), JSON Web Signature (JWS), and JSON Web Token (JWT) standards. In versions on the 4.x branch prior to version 4.0.5, when parsing compact JWS or JWE input, Go JOSE could use excessive memory. The code used strings.Split(token, \".\") to split JWT tokens, which is vulnerable to excessive memory consumption when processing maliciously crafted tokens with a large number of `.` characters.  An attacker could exploit this by sending numerous malformed tokens, leading to memory exhaustion and a Denial of Service. Version 4.0.5 fixes this issue. As a workaround, applications could pre-validate that payloads passed to Go JOSE do not contain an excessive number of `.` characters.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2025-27144"
                }
            ]
        }
    ]
}