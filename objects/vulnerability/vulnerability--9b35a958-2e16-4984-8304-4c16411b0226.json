{
    "type": "bundle",
    "id": "bundle--9c1d33dc-f9ea-4a2f-a0b0-6f7341ed5323",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--9b35a958-2e16-4984-8304-4c16411b0226",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-12-08T00:43:46.835328Z",
            "modified": "2024-12-08T00:43:46.835328Z",
            "name": "CVE-2024-53143",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfsnotify: Fix ordering of iput() and watched_objects decrement\n\nEnsure the superblock is kept alive until we're done with iput().\nHolding a reference to an inode is not allowed unless we ensure the\nsuperblock stays alive, which fsnotify does by keeping the\nwatched_objects count elevated, so iput() must happen before the\nwatched_objects decrement.\nThis can lead to a UAF of something like sb->s_fs_info in tmpfs, but the\nUAF is hard to hit because race orderings that oops are more likely, thanks\nto the CHECK_DATA_CORRUPTION() block in generic_shutdown_super().\n\nAlso, ensure that fsnotify_put_sb_watched_objects() doesn't call\nfsnotify_sb_watched_objects() on a superblock that may have already been\nfreed, which would cause a UAF read of sb->s_fsnotify_info.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-53143"
                }
            ]
        }
    ]
}