{
    "type": "bundle",
    "id": "bundle--40dcfc00-dade-40a3-b91b-d2dc1ababf0e",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--b6c327ad-5036-462e-8e0a-0c904840f7e9",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2023-09-29T00:26:34.847418Z",
            "modified": "2023-09-29T00:26:34.847418Z",
            "name": "CVE-2023-26145",
            "description": "This affects versions of the package pydash before 6.0.0. A number of pydash methods such as pydash.objects.invoke() and pydash.collections.invoke_map() accept dotted paths (Deep Path Strings) to target a nested Python object, relative to the original source object. These paths can be used to target internal class attributes and dict items, to retrieve, modify or invoke nested Python objects.\r\r**Note:**\r\rThe pydash.objects.invoke() method is vulnerable to Command Injection when the following prerequisites are satisfied:\r\r1) The source object (argument 1) is not a built-in object such as list/dict (otherwise, the __init__.__globals__ path is not accessible)\r\r2) The attacker has control over argument 2 (the path string) and argument 3 (the argument to pass to the invoked method)\r\r\rThe pydash.collections.invoke_map() method is also vulnerable, but is harder to exploit as the attacker does not have direct control over the argument to be passed to the invoked function.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2023-26145"
                }
            ]
        }
    ]
}