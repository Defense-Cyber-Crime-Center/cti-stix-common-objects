{
    "type": "bundle",
    "id": "bundle--7523dfcb-c8b2-4229-b783-b5beabf6a596",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--ccbad2ef-85e7-4cf6-a817-b1cdde9d76ea",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2025-01-12T00:41:20.857433Z",
            "modified": "2025-01-12T00:41:20.857433Z",
            "name": "CVE-2024-57839",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nRevert \"readahead: properly shorten readahead when falling back to do_page_cache_ra()\"\n\nThis reverts commit 7c877586da3178974a8a94577b6045a48377ff25.\n\nAnders and Philippe have reported that recent kernels occasionally hang\nwhen used with NFS in readahead code.  The problem has been bisected to\n7c877586da3 (\"readahead: properly shorten readahead when falling back to\ndo_page_cache_ra()\").  The cause of the problem is that ra->size can be\nshrunk by read_pages() call and subsequently we end up calling\ndo_page_cache_ra() with negative (read huge positive) number of pages. \nLet's revert 7c877586da3 for now until we can find a proper way how the\nlogic in read_pages() and page_cache_ra_order() can coexist.  This can\nlead to reduced readahead throughput due to readahead window confusion but\nthat's better than outright hangs.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-57839"
                }
            ]
        }
    ]
}