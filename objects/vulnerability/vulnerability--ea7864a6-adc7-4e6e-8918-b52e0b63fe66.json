{
    "type": "bundle",
    "id": "bundle--f00ba6ea-109a-47a5-be2a-3f84ade0bc77",
    "objects": [
        {
            "type": "vulnerability",
            "spec_version": "2.1",
            "id": "vulnerability--ea7864a6-adc7-4e6e-8918-b52e0b63fe66",
            "created_by_ref": "identity--8ce3f695-d5a4-4dc8-9e93-a65af453a31a",
            "created": "2024-04-11T00:28:31.336209Z",
            "modified": "2024-04-11T00:28:31.336209Z",
            "name": "CVE-2024-26752",
            "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nl2tp: pass correct message length to ip6_append_data\n\nl2tp_ip6_sendmsg needs to avoid accounting for the transport header\ntwice when splicing more data into an already partially-occupied skbuff.\n\nTo manage this, we check whether the skbuff contains data using\nskb_queue_empty when deciding how much data to append using\nip6_append_data.\n\nHowever, the code which performed the calculation was incorrect:\n\n     ulen = len + skb_queue_empty(&sk->sk_write_queue) ? transhdrlen : 0;\n\n...due to C operator precedence, this ends up setting ulen to\ntranshdrlen for messages with a non-zero length, which results in\ncorrupted packets on the wire.\n\nAdd parentheses to correct the calculation in line with the original\nintent.",
            "external_references": [
                {
                    "source_name": "cve",
                    "external_id": "CVE-2024-26752"
                }
            ]
        }
    ]
}